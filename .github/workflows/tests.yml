name: Go Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest

    steps:
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24.1'

    - name: Check out code
      uses: actions/checkout@v4

    - name: Get dependencies
      run: |
        echo "::group::Installing dependencies"
        go mod download
        # Install bc for coverage calculations
        sudo apt-get update && sudo apt-get install -y bc
        echo "::endgroup::"

    - name: Run unit tests
      id: unit-tests
      run: |
        echo "::group::Running unit tests"
        echo "::notice title=Running Tests::Starting unit tests"
        go test ./... -v -json | tee unit-test-results.json
        UNIT_TEST_EXIT_CODE=${PIPESTATUS[0]}

        # Count successes and failures
        SUCCESS_COUNT=$(grep -c '"Action":"pass"' unit-test-results.json || true)
        FAIL_COUNT=$(grep -c '"Action":"fail"' unit-test-results.json || true)
        SKIP_COUNT=$(grep -c '"Action":"skip"' unit-test-results.json || true)

        # Add unit test summary to job summary
        echo "## Unit Test Results" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Passed: $SUCCESS_COUNT" >> $GITHUB_STEP_SUMMARY
        echo "- ❌ Failed: $FAIL_COUNT" >> $GITHUB_STEP_SUMMARY
        echo "- ⏭️ Skipped: $SKIP_COUNT" >> $GITHUB_STEP_SUMMARY

        # If tests failed, extract and display failure details
        if [ $FAIL_COUNT -gt 0 ]; then
          echo "### Failed Tests" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          grep -A 5 '"Action":"fail"' unit-test-results.json | grep -E '"Package"|"Test"|"Output"' >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

          # Create annotations for failed tests
          grep -B 2 -A 5 '"Action":"fail"' unit-test-results.json | while read -r line; do
            if [[ $line == *'"Package"'* ]]; then
              PACKAGE=$(echo $line | sed 's/.*"Package":"\([^"]*\)".*/\1/')
            fi
            if [[ $line == *'"Test"'* ]]; then
              TEST=$(echo $line | sed 's/.*"Test":"\([^"]*\)".*/\1/')
            fi
            if [[ $line == *'"Output"'* ]]; then
              OUTPUT=$(echo $line | sed 's/.*"Output":"\([^"]*\)".*/\1/')
              echo "::error title=Test Failed::Package: $PACKAGE, Test: $TEST, Error: $OUTPUT"
            fi
          done
        fi

        echo "::endgroup::"
        exit $UNIT_TEST_EXIT_CODE

    - name: Run integration tests
      id: integration-tests
      run: |
        echo "::group::Running integration tests"
        echo "::notice title=Running Tests::Starting integration tests"
        RUN_INTEGRATION_TESTS=1 go test ./... -v -json | tee integration-test-results.json
        INTEGRATION_TEST_EXIT_CODE=${PIPESTATUS[0]}

        # Count successes and failures
        SUCCESS_COUNT=$(grep -c '"Action":"pass"' integration-test-results.json || true)
        FAIL_COUNT=$(grep -c '"Action":"fail"' integration-test-results.json || true)
        SKIP_COUNT=$(grep -c '"Action":"skip"' integration-test-results.json || true)

        # Add integration test summary to job summary
        echo "## Integration Test Results" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Passed: $SUCCESS_COUNT" >> $GITHUB_STEP_SUMMARY
        echo "- ❌ Failed: $FAIL_COUNT" >> $GITHUB_STEP_SUMMARY
        echo "- ⏭️ Skipped: $SKIP_COUNT" >> $GITHUB_STEP_SUMMARY

        # If tests failed, extract and display failure details
        if [ $FAIL_COUNT -gt 0 ]; then
          echo "### Failed Tests" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          grep -A 5 '"Action":"fail"' integration-test-results.json | grep -E '"Package"|"Test"|"Output"' >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

          # Create annotations for failed tests
          grep -B 2 -A 5 '"Action":"fail"' integration-test-results.json | while read -r line; do
            if [[ $line == *'"Package"'* ]]; then
              PACKAGE=$(echo $line | sed 's/.*"Package":"\([^"]*\)".*/\1/')
            fi
            if [[ $line == *'"Test"'* ]]; then
              TEST=$(echo $line | sed 's/.*"Test":"\([^"]*\)".*/\1/')
            fi
            if [[ $line == *'"Output"'* ]]; then
              OUTPUT=$(echo $line | sed 's/.*"Output":"\([^"]*\)".*/\1/')
              echo "::error title=Integration Test Failed::Package: $PACKAGE, Test: $TEST, Error: $OUTPUT"
            fi
          done
        fi

        echo "::endgroup::"
        exit $INTEGRATION_TEST_EXIT_CODE

    - name: Generate coverage report
      id: coverage
      run: |
        echo "::group::Generating coverage report"
        echo "::notice title=Coverage::Generating test coverage report"

        # Run coverage for production code only
        go test -coverprofile=coverage.out -covermode=atomic ./...
        COVERAGE_EXIT_CODE=$?

        # Generate coverage percentage
        COVERAGE_PERCENTAGE=$(go tool cover -func=coverage.out | grep total | awk '{print $3}' | sed 's/%//')

        # Store coverage for later steps
        echo "COVERAGE_PERCENTAGE=$COVERAGE_PERCENTAGE" >> $GITHUB_ENV
        echo "coverage_percentage=$COVERAGE_PERCENTAGE" >> $GITHUB_OUTPUT

        # Generate detailed coverage report
        go tool cover -html=coverage.out -o coverage.html

        echo "::notice title=Coverage::Current coverage: ${COVERAGE_PERCENTAGE}%"
        echo "::endgroup::"

        exit $COVERAGE_EXIT_CODE

    - name: Check coverage threshold
      id: coverage-check
      run: |
        echo "::group::Checking coverage threshold"

        # Set minimum coverage threshold (can be adjusted)
        MIN_COVERAGE=60.0
        CURRENT_COVERAGE=${{ steps.coverage.outputs.coverage_percentage }}

        # Convert to integers for comparison (multiply by 100 to handle decimals)
        CURRENT_INT=$(echo "$CURRENT_COVERAGE * 100" | bc -l | cut -d. -f1)
        MIN_INT=$(echo "$MIN_COVERAGE * 100" | bc -l | cut -d. -f1)

        echo "Current coverage: ${CURRENT_COVERAGE}%"
        echo "Minimum threshold: ${MIN_COVERAGE}%"

        if [ $CURRENT_INT -lt $MIN_INT ]; then
          echo "::error title=Coverage Threshold::❌ Coverage ${CURRENT_COVERAGE}% is below minimum threshold of ${MIN_COVERAGE}%"
          echo "COVERAGE_PASSED=false" >> $GITHUB_ENV
          exit 1
        else
          echo "::notice title=Coverage Threshold::✅ Coverage ${CURRENT_COVERAGE}% meets minimum threshold of ${MIN_COVERAGE}%"
          echo "COVERAGE_PASSED=true" >> $GITHUB_ENV
        fi

        echo "::endgroup::"

    - name: Comment coverage on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      env:
        COVERAGE_PERCENTAGE: ${{ steps.coverage.outputs.coverage_percentage }}
        COVERAGE_PASSED: ${{ env.COVERAGE_PASSED }}
      with:
        script: |
          const coverage = process.env.COVERAGE_PERCENTAGE;
          const coveragePassed = process.env.COVERAGE_PASSED === 'true';
          const emoji = coveragePassed ? '✅' : '❌';
          const status = coveragePassed ? 'PASSED' : 'FAILED';

          const body = `## ${emoji} Test Coverage Report

          **Current Coverage:** ${coverage}%
          **Threshold Status:** ${status}
          **Minimum Threshold:** 60.0%

          ${coveragePassed ?
            '🎉 Great job! Coverage meets the minimum threshold.' :
            '⚠️ Coverage is below the minimum threshold. Please add more tests.'}
          `;

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: body
          });

    - name: Upload coverage reports
      uses: actions/upload-artifact@v4
      with:
        name: coverage-reports
        path: |
          coverage.out
          coverage.html
        retention-days: 30

    - name: Run linter
      uses: golangci/golangci-lint-action@v8
      with:
        version: latest

    - name: Generate test summary
      if: always()
      run: |
        echo "## Overall Test Summary" >> $GITHUB_STEP_SUMMARY

        if [ -f unit-test-results.json ] && [ -f integration-test-results.json ]; then
          TOTAL_TESTS=$(( $(grep -c '"Action":"pass"' unit-test-results.json || true ) + $(grep -c '"Action":"pass"' integration-test-results.json || true ) ))
          TOTAL_FAILED=$(( $(grep -c '"Action":"fail"' unit-test-results.json || true ) + $(grep -c '"Action":"fail"' integration-test-results.json || true ) ))
          TOTAL_SKIPPED=$(( $(grep -c '"Action":"skip"' unit-test-results.json || true ) + $(grep -c '"Action":"skip"' integration-test-results.json || true ) ))

          echo "- Total tests: $TOTAL_TESTS" >> $GITHUB_STEP_SUMMARY
          echo "- Total failed: $TOTAL_FAILED" >> $GITHUB_STEP_SUMMARY
          echo "- Total skipped: $TOTAL_SKIPPED" >> $GITHUB_STEP_SUMMARY

          if [ $TOTAL_FAILED -eq 0 ]; then
            echo "::notice title=Tests Summary::✅ All tests passed: $TOTAL_TESTS tests run, $TOTAL_SKIPPED skipped"
          else
            echo "::error title=Tests Summary::❌ Some tests failed: $TOTAL_FAILED failed out of $TOTAL_TESTS tests"
          fi
        else
          echo "Test result files not found. Unable to generate summary." >> $GITHUB_STEP_SUMMARY
        fi


        # Add coverage to summary
        if [ -n "$COVERAGE_PERCENTAGE" ]; then
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Test Coverage" >> $GITHUB_STEP_SUMMARY
          echo "- **Coverage:** ${COVERAGE_PERCENTAGE}%" >> $GITHUB_STEP_SUMMARY
          echo "- **Threshold:** 60.0%" >> $GITHUB_STEP_SUMMARY
          if [ "$COVERAGE_PASSED" = "true" ]; then
            echo "- **Status:** ✅ PASSED" >> $GITHUB_STEP_SUMMARY
          else
            echo "- **Status:** ❌ FAILED" >> $GITHUB_STEP_SUMMARY
          fi
        fi
