name: Build and Release
on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version tag (e.g., v1.0.0)'
        required: true
        default: 'v1.0.0'
      prerelease:
        description: 'Is this a prerelease?'
        required: true
        default: false
        type: boolean

env:
  PROJECT_NAME: go-acme-dns-manager

permissions:
  contents: write

jobs:
  create-tag:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Update CHANGES.md
        run: |
          set -euo pipefail
          # Get current date in YYYY-MM-DD format
          RELEASE_DATE=$(date +%Y-%m-%d)
          
          # Extract version number without 'v' prefix for CHANGES.md
          VERSION_NO_V=$(echo "${{ github.event.inputs.version }}" | sed 's/^v//')
          
          # Update CHANGES.md - Move Unreleased changes to new version section
          sed -i "s/## \[Unreleased\]/## [Unreleased]\n\n## [${VERSION_NO_V}] - ${RELEASE_DATE}/" CHANGES.md
          
          echo "Updated CHANGES.md for version ${VERSION_NO_V}"

      - name: Commit and Create tag
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          set +x
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Commit CHANGES.md update
          git add CHANGES.md
          git commit -m "Update CHANGES.md for release ${{ github.event.inputs.version }}"
          
          # Create and push tag
          git tag -a ${{ github.event.inputs.version }} -m "Release ${{ github.event.inputs.version }}"
          git push origin main
          git push origin ${{ github.event.inputs.version }}

  build:
    needs: create-tag
    runs-on: ubuntu-latest
    strategy:
      matrix:
        goos: [linux, windows, darwin]
        goarch: [amd64, arm64]
        include:
          - goos: windows
            extension: .exe
            archive: zip
          - goos: linux
            extension: ""
            archive: tar.gz
          - goos: darwin
            extension: ""
            archive: zip
          - goos: illumos
            goarch: amd64
            extension: ""
            archive: tar.gz

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.version }}

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'

      - name: Build
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
        run: |
          go build -o ${{ env.PROJECT_NAME }}${{ matrix.extension }} ./cmd/${{ env.PROJECT_NAME }}

      - name: Prepare package
        run: |
          set -euxo pipefail
          PKGNAME="${{ env.PROJECT_NAME }}-${{ github.event.inputs.version }}-${{ matrix.goos }}-${{ matrix.goarch }}"
          mkdir -p "release-package/$PKGNAME"
          cp ${{ env.PROJECT_NAME }}${{ matrix.extension }} "release-package/$PKGNAME/"
          cp config.yaml "release-package/$PKGNAME/config-sample.yaml"
          cp README.md "release-package/$PKGNAME/"
          cp CHANGES.md "release-package/$PKGNAME/"
          [ -f LICENSE ] && cp LICENSE "release-package/$PKGNAME/"

      - name: Create archive
        run: |
          set -euxo pipefail
          PKGNAME="${{ env.PROJECT_NAME }}-${{ github.event.inputs.version }}-${{ matrix.goos }}-${{ matrix.goarch }}"
          cd release-package
          if [ "${{ matrix.archive }}" = "zip" ]; then
            zip -r "../$PKGNAME.zip" "$PKGNAME"
          else
            tar -czvf "../$PKGNAME.tar.gz" "$PKGNAME"
          fi
          cd ..

      - name: List files for debug
        run: find . -type f

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.PROJECT_NAME }}-${{ matrix.goos }}-${{ matrix.goarch }}
          path: |
            ${{ env.PROJECT_NAME }}-${{ github.event.inputs.version }}-${{ matrix.goos }}-${{ matrix.goarch }}.${{ matrix.archive }}

  create-release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: List artifacts
        run: find . -type f

      - name: Checkout code for release notes
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.version }}
          
      - name: Extract release notes
        id: extract_release_notes
        run: |
          # Extract version number without 'v' prefix for CHANGES.md
          VERSION_NO_V=$(echo "${{ github.event.inputs.version }}" | sed 's/^v//')
          
          # Extract the section for this version from CHANGES.md
          # Find the start of the section for this version
          START_LINE=$(grep -n "## \[${VERSION_NO_V}\]" CHANGES.md | head -1 | cut -d: -f1)
          
          if [ -z "$START_LINE" ]; then
            echo "Error: Could not find version ${VERSION_NO_V} in CHANGES.md"
            exit 1
          fi
          
          # Find the start of the next section (##) after this version
          END_LINE=$(tail -n +$((START_LINE+1)) CHANGES.md | grep -n "^##" | head -1 | cut -d: -f1)
          
          if [ -n "$END_LINE" ]; then
            # If there is a next section, extract between START_LINE and the line before the next section
            END_LINE=$((START_LINE + END_LINE - 1))
          else
            # If there's no next section, extract to the end of the file
            END_LINE=$(wc -l < CHANGES.md)
          fi
          
          # Extract the release notes to a temporary file
          sed -n "${START_LINE},${END_LINE}p" CHANGES.md > release_notes.md
          
          # Create a properly formatted version by removing the first line (the version header)
          tail -n +2 release_notes.md > release_notes_final.md
          
          echo "Release notes extracted to release_notes_final.md"
          cat release_notes_final.md

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.event.inputs.version }}
          name: Release ${{ github.event.inputs.version }}
          draft: false
          prerelease: ${{ github.event.inputs.prerelease }}
          body_path: release_notes_final.md
          files: |
            **/${{ env.PROJECT_NAME }}-${{ github.event.inputs.version }}-*.zip
            **/${{ env.PROJECT_NAME }}-${{ github.event.inputs.version }}-*.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
