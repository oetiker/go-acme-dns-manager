name: Build and Release
on:
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release type'
        required: true
        default: 'bugfix'
        type: choice
        options:
          - bugfix   # Increment patch (x.y.Z)
          - feature  # Increment minor (x.Y.0)
          - major    # Increment major (X.0.0)
      prerelease:
        description: 'Is this a prerelease?'
        required: true
        default: false
        type: boolean

env:
  PROJECT_NAME: go-acme-dns-manager

permissions:
  contents: write

jobs:
  create-tag:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.generate_version.outputs.version }}
    steps:
      - name: Checkout code with history
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Generate new version
        id: generate_version
        run: |
          set -euo pipefail
          # Get the latest tag from git
          git fetch --tags
          LATEST_TAG=$(git describe --tags --match 'v*' --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "Latest tag: $LATEST_TAG"
          
          # Parse the latest tag to get major, minor, and patch
          MAJOR=$(echo $LATEST_TAG | sed -E 's/v([0-9]+)\.([0-9]+)\.([0-9]+).*/\1/')
          MINOR=$(echo $LATEST_TAG | sed -E 's/v([0-9]+)\.([0-9]+)\.([0-9]+).*/\2/')
          PATCH=$(echo $LATEST_TAG | sed -E 's/v([0-9]+)\.([0-9]+)\.([0-9]+).*/\3/')
          
          echo "Current version: $MAJOR.$MINOR.$PATCH"
          
          # Increment based on release type
          case "${{ github.event.inputs.release_type }}" in
            major)
              MAJOR=$((MAJOR+1))
              MINOR=0
              PATCH=0
              ;;
            feature)
              MINOR=$((MINOR+1))
              PATCH=0
              ;;
            bugfix)
              PATCH=$((PATCH+1))
              ;;
          esac
          
          # Generate new version
          NEW_VERSION="v$MAJOR.$MINOR.$PATCH"
          echo "New version: $NEW_VERSION"
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
          
          # Also create a version without the v prefix for CHANGES.md
          echo "version_no_v=$MAJOR.$MINOR.$PATCH" >> $GITHUB_OUTPUT
          
          # Get current date in YYYY-MM-DD format
          RELEASE_DATE=$(date +%Y-%m-%d)
          echo "release_date=$RELEASE_DATE" >> $GITHUB_OUTPUT
          
      - name: Update CHANGES.md
        run: |
          set -euo pipefail
          # Get current date in YYYY-MM-DD format
          RELEASE_DATE=${{ steps.generate_version.outputs.release_date }}
          VERSION_NO_V=${{ steps.generate_version.outputs.version_no_v }}
          
          # Update CHANGES.md - Move Unreleased changes to new version section
          sed -i "s/## \[Unreleased\]/## [Unreleased]\n\n## [${VERSION_NO_V}] - ${RELEASE_DATE}/" CHANGES.md
          
          echo "Updated CHANGES.md for version ${VERSION_NO_V}"

      - name: Commit and Create tag
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          set +x
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          VERSION="${{ steps.generate_version.outputs.version }}"
          
          # Commit CHANGES.md update
          git add CHANGES.md
          git commit -m "Update CHANGES.md for release ${VERSION}"
          
          # Create and push tag
          git tag -a ${VERSION} -m "Release ${VERSION}"
          git push origin main
          git push origin ${VERSION}

  build:
    needs: create-tag
    runs-on: ubuntu-latest
    strategy:
      matrix:
        goos: [linux, windows, darwin]
        goarch: [amd64, arm64]
        include:
          - goos: windows
            extension: .exe
            archive: zip
          - goos: linux
            extension: ""
            archive: tar.gz
          - goos: darwin
            extension: ""
            archive: zip
          - goos: illumos
            goarch: amd64
            extension: ""
            archive: tar.gz

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.create-tag.outputs.version }}

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'

      - name: Build
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
        run: |
          go build -o ${{ env.PROJECT_NAME }}${{ matrix.extension }} ./cmd/${{ env.PROJECT_NAME }}

      - name: Prepare package
        run: |
          set -euxo pipefail
          PKGNAME="${{ env.PROJECT_NAME }}-${{ needs.create-tag.outputs.version }}-${{ matrix.goos }}-${{ matrix.goarch }}"
          mkdir -p "release-package/$PKGNAME"
          cp ${{ env.PROJECT_NAME }}${{ matrix.extension }} "release-package/$PKGNAME/"
          cp config.yaml "release-package/$PKGNAME/config-sample.yaml"
          cp README.md "release-package/$PKGNAME/"
          cp CHANGES.md "release-package/$PKGNAME/"
          [ -f LICENSE ] && cp LICENSE "release-package/$PKGNAME/"

      - name: Create archive
        run: |
          set -euxo pipefail
          PKGNAME="${{ env.PROJECT_NAME }}-${{ needs.create-tag.outputs.version }}-${{ matrix.goos }}-${{ matrix.goarch }}"
          cd release-package
          if [ "${{ matrix.archive }}" = "zip" ]; then
            zip -r "../$PKGNAME.zip" "$PKGNAME"
          else
            tar -czvf "../$PKGNAME.tar.gz" "$PKGNAME"
          fi
          cd ..

      - name: List files for debug
        run: find . -type f

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.PROJECT_NAME }}-${{ matrix.goos }}-${{ matrix.goarch }}
          path: |
            ${{ env.PROJECT_NAME }}-${{ needs.create-tag.outputs.version }}-${{ matrix.goos }}-${{ matrix.goarch }}.${{ matrix.archive }}

  create-release:
    needs: [build, create-tag]  # Add explicit dependency on create-tag to access its outputs
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: List artifacts
        run: find . -type f

      - name: Checkout code for release notes
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.create-tag.outputs.version }}
          
      - name: Extract release notes
        id: extract_release_notes
        run: |
          set -e
          
          # Extract version number without 'v' prefix for CHANGES.md
          VERSION_NO_V=$(echo "${{ needs.create-tag.outputs.version }}" | sed 's/^v//')
          echo "Looking for version: ${VERSION_NO_V}"
          
          # Debug: Print the first 30 lines of CHANGES.md to aid debugging
          echo "First 30 lines of CHANGES.md:"
          head -n 30 CHANGES.md
          
          # Use Perl to extract the relevant section - much more reliable than bash/awk
          perl -e '
            # Get version from first argument
            my $version = $ARGV[0];
            
            # Read the entire CHANGES.md file
            undef $/;
            my $content = <STDIN>;
            
            # Use a regex to find the section for our version
            if ($content =~ /## \[\Q$version\E\][^\n]*\n(.*?)(?=\n## \[|$)/s) {
              my $section = $1;
              # Trim leading/trailing whitespace
              $section =~ s/^\s+|\s+$//g;
              print $section;
            } else {
              # Not found, create minimal content
              print "Release version $version\n";
              warn "WARNING: Could not find version $version in CHANGES.md\n";
            }
          ' "$VERSION_NO_V" < CHANGES.md > release_notes_final.md
          
          # Show the result
          echo "Release notes extracted to release_notes_final.md:"
          cat release_notes_final.md

      - name: Debug artifact files
        run: |
          echo "Version from create-tag job: ${{ needs.create-tag.outputs.version }}"
          echo "Looking for artifacts matching:"
          echo "**/${{ env.PROJECT_NAME }}-${{ needs.create-tag.outputs.version }}-*.zip"
          echo "**/${{ env.PROJECT_NAME }}-${{ needs.create-tag.outputs.version }}-*.tar.gz"
          find . -type f -name "${{ env.PROJECT_NAME }}*" | sort

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.create-tag.outputs.version }}
          name: Release ${{ needs.create-tag.outputs.version }}
          draft: false
          prerelease: ${{ github.event.inputs.prerelease }}
          body_path: release_notes_final.md
          fail_on_unmatched_files: false
          files: |
            **/${{ env.PROJECT_NAME }}-${{ needs.create-tag.outputs.version }}-*.zip
            **/${{ env.PROJECT_NAME }}-${{ needs.create-tag.outputs.version }}-*.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
